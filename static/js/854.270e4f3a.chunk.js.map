{"version":3,"file":"static/js/854.270e4f3a.chunk.js","mappings":"6SACMA,EAAM,mCAECC,EAAmB,mCAAG,2FAC3BC,EAAWC,EAAAA,EAAAA,IAAU,gDAAiD,CAC1EC,OAAQ,CACNC,QAASL,KAHoB,kBAM1BE,GAN0B,2CAAH,qDASnBI,EAAiB,mCAAG,WAAMC,GAAN,uFACRJ,EAAAA,EAAAA,IAAA,6CACiBI,GACtC,CACEH,OAAQ,CACNC,QAASL,KALgB,cACzBE,EADyB,yBASxBA,GATwB,2CAAH,sDAWjBM,EAAc,mCAAG,WAAMD,GAAN,uFACLJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,YAErB,CACEH,OAAQ,CACNC,QAASL,KALa,cACtBE,EADsB,yBASrBA,GATqB,2CAAH,sDAYdO,EAAiB,mCAAG,WAAMF,GAAN,uFACRJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,YAErB,CACEH,OAAQ,CACNC,QAASL,EACTU,KAAM,KANmB,cACzBR,EADyB,yBAUxBA,EAASS,MAVe,2CAAH,sDAajBC,EAAa,mCAAG,WAAMC,GAAN,uFACJV,EAAAA,EAAAA,IAAA,4CAErB,CACEC,OAAQ,CACNU,SAAU,QACVT,QAASL,EACTU,KAAM,EACNG,MAAAA,KARqB,cACrBX,EADqB,yBAYpBA,EAASS,MAZW,2CAAH,qD,iIC9CbI,EAAYC,EAAAA,GAAAA,GAAH,8H,SCmBtB,EApBsB,SAAC,GAA4C,IAEtCC,EAAUC,EAFdC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,UAAmC,IAAxBC,aAAAA,OAAwB,MAAT,GAAS,EAWhE,OACE,UAACN,EAAD,YACE,gBAAKO,KAXkBL,EADZ,kCACsBC,EAWGG,EAVjCH,EAKED,EAAWC,EAHT,6HAQ4CK,IAAKJ,KACxD,uBAAIA,KACJ,wCAAgBC,OAGrB,ECjBYI,EAAaR,EAAAA,GAAAA,GAAH,qGCkBvB,EAjBiB,SAAC,GAAkC,IAAD,IAA/BS,UAAaC,KAAAA,OAAkB,MAAX,GAAW,EACjD,OACE,SAACF,EAAD,UACGE,EAAKC,OAAS,EACXD,EAAKE,KAAI,gBAAGT,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAAcQ,EAAlC,EAAkCA,UAAlC,OACP,SAAC,EAAD,CACEV,KAAMA,EACNC,UAAWA,EACXC,aAAcA,GACTQ,EALA,IAQT,8CAGT,ECID,EAjBa,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACNvB,GAAYwB,EAAAA,EAAAA,MAAZxB,QAER,GAA0ByB,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAWA,OAVAC,EAAAA,EAAAA,YAAU,WACRL,GAAa,IACbtB,EAAAA,EAAAA,IAAeD,GACZ6B,MAAK,gBAAGzB,EAAH,EAAGA,KAAH,OAAcuB,EAASvB,EAAvB,IACL0B,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACXG,SAAQ,WACPX,GAAa,EACd,GACJ,GAAE,CAACvB,EAASuB,KAEN,SAACY,EAAD,CAAWjB,UAAWQ,GAC9B,C","sources":["Api/fetchApi.js","components/CastLists/CastListsItem/CastListsItem.styled.jsx","components/CastLists/CastListsItem/CastListsItem.jsx","components/CastLists/CastLists.styled.jsx","components/CastLists/CastLists.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nconst KEY = 'b36a691b07ce9c3557881351abfd0b29';\n\nexport const fetchTrendingMovies = async () => {\n  const response = axios.get('https://api.themoviedb.org/3/trending/all/day', {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}`,\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n  return response;\n};\nexport const fetchMovieСast = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n  return response;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews`,\n    {\n      params: {\n        api_key: KEY,\n        page: 1,\n      },\n    }\n  );\n  return response.data;\n};\n\nexport const OnSearchMovie = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie`,\n    {\n      params: {\n        language: 'en-US',\n        api_key: KEY,\n        page: 1,\n        query,\n      },\n    }\n  );\n  return response.data;\n};\n","import styled from 'styled-components';\n\nexport const ListsItem = styled.li`\n  & img {\n    width: 350px;\n    height: 525px;\n  }\n  & p {\n    margin: 0;\n    padding: 0;\n  }\n`;\n","import { ListsItem } from './CastListsItem.styled';\nconst CastListsItem = ({ name, character, profile_path = '' }) => {\n  const urlImg = 'https://image.tmdb.org/t/p/w500';\n  const CaptchaPosterPath = (base_url, url_patch) => {\n    if (!url_patch) {\n      // болванка\n      return 'https://www.themoviedb.org/assets/2/apple-touch-icon-cfba7699efe7a742de25c28e08c38525f19381d31087c69e89d6bcb8e3c0ddfa.png';\n    }\n    // Url картинки для карточки\n    return base_url + url_patch;\n  };\n\n  return (\n    <ListsItem>\n      <img src={CaptchaPosterPath(urlImg, profile_path)} alt={name} />\n      <p>{name}</p>\n      <p> Character: {character}</p>\n    </ListsItem>\n  );\n};\n\nexport default CastListsItem;\n","import styled from 'styled-components';\n\nexport const CastListUl = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  column-gap: 20px;\n  row-gap: 10px;\n`;\n","import CastListsItem from './CastListsItem';\nimport { CastListUl } from './CastLists.styled';\n\nconst CastList = ({ castsData: { cast = [] } }) => {\n  return (\n    <CastListUl>\n      {cast.length > 0\n        ? cast.map(({ name, character, profile_path, credit_id }) => (\n            <CastListsItem\n              name={name}\n              character={character}\n              profile_path={profile_path}\n              key={credit_id}\n            />\n          ))\n        : \"We don't have any cast list for this movie\"}\n    </CastListUl>\n  );\n};\n\nexport default CastList;\n","import { useState } from 'react';\nimport { fetchMovieСast } from 'Api/fetchApi';\nimport { useParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport CastLists from 'components/CastLists';\nconst Cast = ({ setIsLoading }) => {\n  const { movieId } = useParams();\n\n  const [casts, setCasts] = useState([]);\n  useEffect(() => {\n    setIsLoading(true);\n    fetchMovieСast(movieId)\n      .then(({ data }) => setCasts(data))\n      .catch(error => console.log(error))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId, setIsLoading]);\n\n  return <CastLists castsData={casts} />;\n};\n\nexport default Cast;\n"],"names":["KEY","fetchTrendingMovies","response","axios","params","api_key","fetchMovieDetails","movieId","fetchMovieСast","fetchMovieReviews","page","data","OnSearchMovie","query","language","ListsItem","styled","base_url","url_patch","name","character","profile_path","src","alt","CastListUl","castsData","cast","length","map","credit_id","setIsLoading","useParams","useState","casts","setCasts","useEffect","then","catch","error","console","log","finally","CastLists"],"sourceRoot":""}